
//return other instanceof Color && self.r === other1.r && self.g === other2.g && self.b === other3.b;

IO.print(!Number.int(65));
IO.print(65 + 2 * 4 / 5 > 5 ? !Number.float(30) : (!Number.int(30)) + 4);


/*function* range(from, to, increment) {
	for(var i=from;i<to;i+=increment)
		yield i;
}

function* pairs(to) {
	yield* range(0, to, 2);
}

IO.print(pairs(20).pack());
pairs(35).forEach(IO.print);
	
	
var arrr = new Array(2, 4, 8);

IO.print(arrr);

const var Obj = {
	//claw: Obj
	dos: function() {
		IO.print(typeof(Obj));
	},
	
	constructor: function(value = 50) {
		self.scalar = value;
	}
};

Obj.dos();

//const var utils = import "utils.pwd";
//IO.print(Object.toString(utils));

const var ObjExtended = extends(Obj) const {
	constructor: function(power, dash) {
		super(power);
		self.dash = dash;
	},
	
	dos: function() {
		super.dos();
		IO.print("Tested");
	},
	
	toString: function() { return Object.toString(self, true); }
};

var argggs = [35, true];

var testvar = new ObjExtended(argggs.expand());
IO.print(testvar);

testvar.dos();*/


//var utils = import("utils.pwd");
/*const static valuess = 65;
const var CLAW = Object.freeze({ power: 50, dash: false });

IO.print(valuess);

Vector2 = Object.freeze({
	constructor: function(x, y) {
		static ccount = 0;
		static const ccount2 = 0;
		self.x = x ? x : 0;
		self.y = y ? y : 0;
	},
	
	toString: function() { return "["..self.x..", "..self.y.."]"; },
	
	__plus__: function(value) {
		if(typeof(value) === "object" && value instanceof Vector2) {
			return new Vector2(self.x + value.x, self.y + value.y);
		}
		return new Vector2(self.x + value, self.y + value);
	},
	
	toArray: function() { return [self.x, self.y]; },
	toMap: function() { return ["x": self.x, "y": self.y]; },
	
	iterator: function*() {
		yield self.x;
		yield self.y;
	},
	
	toNumber: function() { return self.x / self.y; },
	
	__get__: function(key) {
		switch(key) {
			case 0:
			case "x":
				return self.x;
			case 1:
			case "y":
				return self.y;
			default: return null;
		}
	},
	
	__set__: function(key, value) {
		//valuess++;
		switch(key) {
			case 0:
			case "x":
				return self.x = Number.double(value);
			case 1:
			case "y":
				return self.y = Number.double(value);
			default: return null;
		}
	},
	
	keys: ("x", "y", 0, 1)
});

var vec = new Vector2(5, null);
IO.print(vec);
IO.print(typeof(Array(vec)));
IO.print(Array(vec));

IO.print(Map(vec));

IO.print(vec + new Vector2());

IO.print(Object.toString(Vector2));

for(value : vec)
	IO.print(value);

IO.print(Number.int(vec));

IO.print(vec);
IO.print(vec[0]);
IO.print(vec["y"]);


var testgen = function*(vars...)
{
	for(var i=0;i<vars[0];i++)
	{
		//IO.print(i);
		yield i;
	}
};

//System.exit(0);

for(value : testgen(10))
	IO.print(value);

var objtest = {};

objtest.done = 50;

function factorial(x)
{
	return x < 2 ? 1 : x * factorial(x - 1);
}

IO.print(factorial(5));

var test = "two";
var local = 650;
local = local === 650 ? local * 2 : local - 50;

try
{
	var jjj = 60;
	if(jjj == 60)
		throw jjj.." not works";
}
catch(ex)
{
	IO.print(ex.getStackTrace());
	IO.print(Object.toString(ex));
}

function print(tag, vars...)
{
	IO.print(tag, vars.expand());
}

var assign = function(obj, varname, value = null)
{
	Object.setProperty(obj, varname, value);
};

print("ROOT", "ola", "k", "ase");

assign(objtest, "[]", print);

objtest.toString = function() { return Object.toString(self); };

IO.print(objtest);

assign(objtest, "__plus__", function(value)
{
	if(typeof(self.value) !== "number")
		self.value = 0;
	self.value += value;
	return self.value;
});

IO.print(objtest + 250);

switch(test)
{
	case 1:
		IO.print("The FIRST case");
		break;
	case "two":
		IO.print("Is in case 2!!");
		break;
	case 3.3:
		IO.print("3 is the case!");
		break;
	default:
		IO.print("Is in DEFAULT");
	break;
}

for(value, i : [5, 10, 20, 40, "end"])
	IO.print("Value: "..value.."; iteration: "..i..";");

if(5 > 4 && (10 === 9 || 10 === 10))
	IO.print(true);
else if(IO === null)
{
	IO.print(650);
	//IO = Object;
}
else if(650 < 10 || IO !== null) {}
else {
	IO.print("lol");
}

var it = 0;
while(it < 11)
	IO.print("Iteration number: "..!(++it));

local = 650;
local = local === 650 ? local * 2 : local - 50;

var arr = [45, null, "this is sparta", [], 5.65f];

IO.print(arr.expand());

var tuple = (5, 8);
IO.print((5, "nada mÃ¡s", 650));

var obj = {
	done: true,
	law: ["dash", false]
};

IO.print(obj, new Object(obj));
IO.print(new obj());

IO.print(Object.deepToString(
{
	done: true,
	law: ["dash", false],
	nested: {
		folk: ("none", 65)
	}
}));

var map = [:];
map.put("dash", false);

IO.print([
	"hello": true,
	"inf": Infinity,
	5: local,
	"obj": { dash: true, power: 50 }
]);

local, arr[0], obj.law[1] = local + 50, "none", true;

IO.print(typeof (IO.print));
IO.print(new obj() instanceof obj);

IO.print((65,)..["hola", "k", "ase"]);

for(var it, pow = 0, 0; it < 12; it, pow = it + 1, it * it)
{
	IO.print("Iteration number: "..pow);
}*/



//local.show("hola", arr[2](6, local));
/*local.show(arr, 750, arr[6], 4, 65, arr[5](65, 8, 5, 78, 15, 999, 5), "hell", 9999);
local("poz ezo");*/